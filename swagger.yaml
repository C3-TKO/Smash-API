swagger: '2.0'

info:
  version: "0.0.1"
  title: Smash API
  description: API for http://smash.cologne

host: smash.cologne
basePath: /api
schemes:
  - http
securityDefinitions:
  basicAuth:
    type: basic
    description: HTTP Basic Authentication. Works over `HTTP` and `HTTPS`
consumes:
  - application/json
produces:
  - application/hal+json
  - application/problem+json

paths:
  /players:
    get:
      description: |
        Gets a list of `Player` objects.
      parameters:
        - $ref: '#/parameters/pageNumber'
        - $ref: '#/parameters/pageSize'
        - name: populateTeams
          in: query
          description: Indicates if the list of teams will be updated
          type: boolean
          default: false
          required: false

      responses:
        200:
          description: Successful response
          schema:
            type: object
            properties:
              items:
                type: array
                minItems: 0
                maxItems: 100
                uniqueItems: true
                items:
                  $ref: '#/definitions/Player'
              total:
                type: integer
              count:
                type: integer
              _links:
                $ref: '#/definitions/PaginationLinks'
    post:
      description: |
        Creates a new `Player` model and updates the list of teams with all new team combinations with this new player
      parameters:
        - name: player
          in: body
          description: Model of the to be created player
          required: true
          schema:
            $ref: '#/definitions/NewPlayer'
      responses:
        201:
          $ref: '#/responses/201'
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
  /players/{id}:
    get:
      description: |
        Gets a specific `Player` object identified by its id
      parameters:
        - name: id
          in: path
          type: number
          format: integer
          description: Id of the player
          required: true
      responses:
        200:
          description: Succesful response
          schema:
            $ref: '#/definitions/Player'
        404:
          $ref: '#/responses/404'
    put:
      description: |
        Updates a specific `Player` model identified by its id
      parameters:
        - name: id
          in: path
          type: number
          format: integer
          description: Id of the player
          required: true
        - name: player
          in: body
          description: The player model to be updated
          schema:
            $ref: '#/definitions/Player'
          required: true
      responses:
        200:
          description: Succesful response
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        404:
          $ref: '#/responses/404'
    delete:
      description: |
        Deletes a `Player` model and all teams that player is a part of.
      parameters:
        - name: id
          in: path
          type: number
          format: integer
          description: Id of the player
          required: true
      responses:
        204:
          $ref: '#/responses/204'
        401:
          $ref: '#/responses/401'

  /teams:
    get:
      description: |
        Gets a list of `Team` objects
      parameters:
        - $ref: '#/parameters/pageNumber'
        - $ref: '#/parameters/pageSize'
      responses:
        200:
          description: Successful response
          schema:
            type: object
            properties:
              items:
                type: array
                minItems: 0
                maxItems: 100
                uniqueItems: true
                items:
                  $ref: '#/definitions/Team'
              total:
                type: integer
              count:
                type: integer
              _links:
                $ref: '#/definitions/PaginationLinks'
  /teams/{id}:
    get:
      description: |
        Gets a specific `Team` object identified by its id.
      parameters:
        - name: id
          in: path
          type: number
          format: integer
          description: Id of the team
          required: true
      responses:
        200:
          description: Succesful response
          schema:
            $ref: '#/definitions/Team'
        404:
          $ref: '#/responses/404'
  /teams/{id}/name:
    put:
      description: |
        Updates the name of a specific `Team` model identified by its id.
      parameters:
        - name: id
          in: path
          type: number
          format: integer
          description: Id of the team
          required: true
        - name: name
          in: body
          description: New name for the `Team` model
          schema:
            type: object
            properties:
              name:
                type: string
          required: true
      responses:
        200:
          description: Succesful response
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        404:
          $ref: '#/responses/404'

  /rounds:
    get:
      description: |
        Gets a collection of rounds
      parameters:
        - $ref: '#/parameters/pageNumber'
        - $ref: '#/parameters/pageSize'
      responses:
        200:
          description: Successful response
          schema:
            type: object
            properties:
              items:
                type: array
                minItems: 0
                maxItems: 100
                uniqueItems: true
                items:
                  $ref: '#/definitions/Round'
              total:
                type: integer
              count:
                type: integer
              _links:
                $ref: '#/definitions/PaginationLinks'

    post:
      description: |
        Creates a new `Round` for the specified date
      parameters:
        - name: round
          in: body
          description: Model of the round to be created
          required: true
          schema:
            $ref: '#/definitions/NewRound'
      responses:
        201:
          $ref: '#/responses/201'
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
  /rounds/{id}:
    get:
      description: |
        Gets a specific `Round` object identified by its id.
      parameters:
        - name: id
          in: path
          type: number
          format: integer
          description: Id of the team
          required: true
      responses:
        200:
          description: Succesful response
          schema:
            $ref: '#/definitions/Round'
        404:
          $ref: '#/responses/404'
    put:
      description: |
        Updates a specific `Round` model identified by its id
      parameters:
        - name: id
          in: path
          type: number
          format: integer
          description: Id of the round
          required: true
        - name: player
          in: body
          description: The round model to be updated
          schema:
            $ref: '#/definitions/Round'
          required: true
      responses:
        200:
          description: Succesful response
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        404:
          $ref: '#/responses/404'
    delete:
      description: |
        Deletes a `Round` model.
      parameters:
        - name: id
          in: path
          type: number
          format: integer
          description: Id of the round
          required: true
      responses:
        204:
          $ref: '#/responses/204'
        401:
          $ref: '#/responses/401'

  /games:
    get:
      description: |
        Gets a collection of games
      parameters:
        - $ref: '#/parameters/pageNumber'
        - $ref: '#/parameters/pageSize'
      responses:
        200:
          description: Successful response
          schema:
            type: object
            properties:
              items:
                type: array
                minItems: 0
                maxItems: 100
                uniqueItems: true
                items:
                  $ref: '#/definitions/Game'
              total:
                type: integer
              count:
                type: integer
              _links:
                $ref: '#/definitions/PaginationLinks'
    post:
      description: |
        Creates a new `Gae` for the specified date
      parameters:
        - name: round
          in: body
          description: Model of the game to be created round
          required: true
          schema:
            $ref: '#/definitions/NewGame'
      responses:
        201:
          $ref: '#/responses/201'
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'


  /tokens:
    post:
      description: Creates a JWT authentication token
      security:
       - basicAuth: []
      responses:
        200:
          description: Token created
          schema:
            type: object
            properties:
              token:
                type: string
        401:
          $ref: '#/responses/401'
        404:
          $ref: '#/responses/404'

definitions:
  NewPlayer:
    type: object
    description: A model describing a badminton player to be created
    properties:
      name:
        type: string
        description: Name of a player.

  Player:
    type: object
    description: A model describing a badminton player
    properties:
      id:
        type: number
        format: integer
        description: Unique identifier of a specific player.
      name:
        type: string
        description: Name of a player.
      _links:
        $ref: '#/definitions/HAL'

  HAL:
    properties:
      self:
        type: object
        properties:
          href:
            type: string
            format: url

  Team:
    type: object
    description: A model describing a team of badminton players
    properties:
      id:
        type: number
        format: integer
        description: Unique identifier of a team
      id_player_a:
        type: number
        format: integer
        description: Unique identifier of a badminton player
      id_player_b:
        type: number
        format: integer
        description: Unique identifier of a badminton player
      name:
        type: string
        description: The name of a team
      _links:
        $ref: '#/definitions/HAL'
      _embedded:
        type: object
        properties:
          player_a:
            $ref: '#/definitions/Player'
          player_b:
            $ref: '#/definitions/Player'

  NewGame:
    type: object
    description: A `Game` describes the results of two competing `Team` entites. It belongs to a specific round
    properties:
      id_round:
        type: number
        format: integer
        description: Unique identifier of the round that game belongs to
      id_team_a:
        type: number
        format: integer
        description: Unique identifier of the first of the two competing teams
      id_team_b:
        type: number
        format: integer
        description: Unique identifier of the second of the two competing teams
      team_a_score:
        type: number
        format: integer
        minimum: 0
        maximum: 30
        description: Final score of the first team
      team_b_score:
        type: number
        format: integer
        minimum: 0
        maximum: 30
        description: Final score of the second team
      _links:
        $ref: '#/definitions/HAL'
      _embedded:
        type: object
        properties:
          round:
            $ref: '#/definitions/Round'
          player_a:
            $ref: '#/definitions/Player'
          player_b:
            $ref: '#/definitions/Player'


  Game:
    type: object
    description: A `Game` describes the results of two competing `Team` entites. It belongs to a specific round
    properties:
      id:
        type: number
        format: integer
        description: Unique identifier of a game
      id_round:
        type: number
        format: integer
        description: Unique identifier of the round that game belongs to
      id_team_a:
        type: number
        format: integer
        description: Unique identifier of the first of the two competing teams
      id_team_b:
        type: number
        format: integer
        description: Unique identifier of the second of the two competing teams
      team_a_score:
        type: number
        format: integer
        minimum: 0
        maximum: 30
        description: Final score of the first team
      team_b_score:
        type: number
        format: integer
        minimum: 0
        maximum: 30
        description: Final score of the second team
      _links:
        $ref: '#/definitions/HAL'
      _embedded:
        type: object
        properties:
          round:
            $ref: '#/definitions/Round'
          player_a:
            $ref: '#/definitions/Player'
          player_b:
            $ref: '#/definitions/Player'

  NewRound:
    type: object
    description: A `Round` consists of several `Game` entities belonging to one specific date
    properties:
      date:
        type: string
        format: date
        description: Date of the round

  Round:
    type: object
    description: A `Round` consists of several `Game` entities belonging to one specific date
    properties:
      id:
        type: number
        format: integer
        description: Unique identifier of a round
      date:
        type: string
        format: date
        description: Date of the round
      _links:
        $ref: '#/definitions/HAL'

  PaginationLinks:
    type: object
    properties:
      self:
        type: string
        description: URI of this collection
        format: url
      first:
        type: string
        description: URI of the first set of this collection
        format: url
      last:
        type: string
        description: URI of the last set of this collection
        format: url
      prev:
        type: string
        description: URI of the previous set of this collection
        format: url
      next:
        type: string
        description: URI of the next set of this collection
        format: url
    required:
    - self
    - first
    - last

responses:
  201:
    description: Resource created
    headers:
      Location:
        description: URI of the created resource
        type: string
        format: url
  204:
    description: Resource deleted
  400:
    description: Bad Request
    schema:
      type: object
      properties:
        errors:
          type: object
          description: This object contains a property entry for each porperty that is wrong
        status:
          type: integer
        type:
          type: string
        title:
          type: string
  401:
    description: Unauthorized
    schema:
      type: object
      properties:
        detail:
          type: string
        status:
          type: integer
        type:
          type: string
        title:
          type: string
  404:
    description: Not Found
    schema:
      type: object
      properties:
        detail:
          type: string
        status:
          type: integer
        type:
          type: string
        title:
          type: string

parameters:
  pageSize:
    name: pageSize
    in: query
    description: Number of entities returned
    type: integer
    default: 20
    required: false

  pageNumber:
    name: pageNumber
    in: query
    description: Page number
    type: integer
    default: 1
    maximum: 100
    minimum: 1
    required: false